tmp  [[DataBlock<[0,8) --from--(0)>]]
tmp  [[DataBlock<[0,8) --from--(1)>]]
tmp  [[DataBlock<[0,8) --from--(2)>]]
tmp  [[DataBlock<[0,8) --from--(3)>]]
ret  [[[DataBlock<[0,2)>], [DataBlock<[2,4)>], [DataBlock<[4,6)>], [DataBlock<[6,8)>]]]
tmp  [[DataBlock<[0,8) --from--(4)>]]
tmp  [[DataBlock<[0,8) --from--(5)>]]
tmp  [[DataBlock<[0,8) --from--(6)>]]
tmp  [[DataBlock<[0,8) --from--(7)>]]
ret  [[[DataBlock<[0,2)>], [DataBlock<[2,4)>], [DataBlock<[4,6)>], [DataBlock<[6,8)>]]]
tmp  [[DataBlock<[0,2) --from--(0,1,2,3)>]]
tmp  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>]]
tmp  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>], [DataBlock<[4,6) --from--(0,1,2,3)>]]
tmp  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>], [DataBlock<[4,6) --from--(0,1,2,3)>], [DataBlock<[6,8) --from--(0,1,2,3)>]]
tmp  [[DataBlock<[0,2) --from--(4,5,6,7)>]]
tmp  [[DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>]]
tmp  [[DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>], [DataBlock<[4,6) --from--(4,5,6,7)>]]
tmp  [[DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>], [DataBlock<[4,6) --from--(4,5,6,7)>], [DataBlock<[6,8) --from--(4,5,6,7)>]]
ret  [[[DataBlock<[0,1)>], [DataBlock<[3,4)>], [DataBlock<[4,5)>], [DataBlock<[7,8)>], [DataBlock<[1,2)>], [DataBlock<[2,3)>], [DataBlock<[5,6)>], [DataBlock<[6,7)>]]]
Reduce-scatter data sketch on symmetry ((0,1,2,3),(4,5,6,7))
> step 0
print the table in 8 :
| {[0,8) --from--(0)} | {[0,8) --from--(1)} | {[0,8) --from--(2)} | {[0,8) --from--(3)} | {[0,8) --from--(4)} | {[0,8) --from--(5)} | {[0,8) --from--(6)} | {[0,8) --from--(7)} | 
> step 1
print the table in 8 :
| {[0,2) --from--(0,1,2,3)} | {[2,4) --from--(0,1,2,3)} | {[4,6) --from--(0,1,2,3)} | {[6,8) --from--(0,1,2,3)} | {[0,2) --from--(4,5,6,7)} | {[2,4) --from--(4,5,6,7)} | {[4,6) --from--(4,5,6,7)} | {[6,8) --from--(4,5,6,7)} | 
> step 2
print the table in 8 :
| {[0,1) --from--(0,1,2,3,4,5,6,7)} | {[3,4) --from--(0,1,2,3,4,5,6,7)} | {[4,5) --from--(0,1,2,3,4,5,6,7)} | {[7,8) --from--(0,1,2,3,4,5,6,7)} | {[1,2) --from--(0,1,2,3,4,5,6,7)} | {[2,3) --from--(0,1,2,3,4,5,6,7)} | {[5,6) --from--(0,1,2,3,4,5,6,7)} | {[6,7) --from--(0,1,2,3,4,5,6,7)} | 
color  [0, 0, 0, 0, 0, 0, 0, 0]
ans  [[0, 1, 2, 3], [4, 5, 6, 7]]
origin  [[DataBlock<[0,8) --from--(0)>], [DataBlock<[0,8) --from--(1)>], [DataBlock<[0,8) --from--(2)>], [DataBlock<[0,8) --from--(3)>], [DataBlock<[0,8) --from--(4)>], [DataBlock<[0,8) --from--(5)>], [DataBlock<[0,8) --from--(6)>], [DataBlock<[0,8) --from--(7)>]]
target  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>], [DataBlock<[4,6) --from--(0,1,2,3)>], [DataBlock<[6,8) --from--(0,1,2,3)>], [DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>], [DataBlock<[4,6) --from--(4,5,6,7)>], [DataBlock<[6,8) --from--(4,5,6,7)>]]
353 target[ 0 ] before sort  [DataBlock<[0,2) --from--(0,1,2,3)>]
355 target[ 0 ] after sort  [DataBlock<[0,2) --from--(0,1,2,3)>]
353 target[ 1 ] before sort  [DataBlock<[2,4) --from--(0,1,2,3)>]
355 target[ 1 ] after sort  [DataBlock<[2,4) --from--(0,1,2,3)>]
353 target[ 2 ] before sort  [DataBlock<[4,6) --from--(0,1,2,3)>]
355 target[ 2 ] after sort  [DataBlock<[4,6) --from--(0,1,2,3)>]
353 target[ 3 ] before sort  [DataBlock<[6,8) --from--(0,1,2,3)>]
355 target[ 3 ] after sort  [DataBlock<[6,8) --from--(0,1,2,3)>]
RingOp i  1
origin[group[0]]  [DataBlock<[0,8) --from--(0)>]
origin[i]  [DataBlock<[0,8) --from--(1)>]
RingOp i  2
origin[group[0]]  [DataBlock<[0,8) --from--(0)>]
origin[i]  [DataBlock<[0,8) --from--(2)>]
RingOp i  3
origin[group[0]]  [DataBlock<[0,8) --from--(0)>]
origin[i]  [DataBlock<[0,8) --from--(3)>]
360 group  [0, 1, 2, 3]
362 target[i][0]  [6,8) --from--(0,1,2,3)
364 group  [0, 1, 2, 3]
block_template[ 0 ]  [DataBlock<[0,2)>]
block_template[ 1 ]  [DataBlock<[2,4)>]
block_template[ 2 ]  [DataBlock<[4,6)>]
block_template[ 3 ]  [DataBlock<[6,8)>]
offset  1
group  [0, 1, 2, 3]
node_index  0
offset  1
(node_index + len(group) - offset) % len(group)  3
src 0
dst 1
blk  [6,8) --from--(0)
CommOp  0 send <[6,8) --from--(0)> to 1
group  [0, 1, 2, 3]
node_index  1
offset  1
(node_index + len(group) - offset) % len(group)  0
src 1
dst 2
blk  [0,2) --from--(1)
CommOp  1 send <[0,2) --from--(1)> to 2
group  [0, 1, 2, 3]
node_index  2
offset  1
(node_index + len(group) - offset) % len(group)  1
src 2
dst 3
blk  [2,4) --from--(2)
CommOp  2 send <[2,4) --from--(2)> to 3
group  [0, 1, 2, 3]
node_index  3
offset  1
(node_index + len(group) - offset) % len(group)  2
src 3
dst 0
blk  [4,6) --from--(3)
CommOp  3 send <[4,6) --from--(3)> to 0
offset  2
group  [0, 1, 2, 3]
node_index  0
offset  2
(node_index + len(group) - offset) % len(group)  2
src 0
dst 1
blk  [4,6) --from--(0,3)
CommOp  0 send <[4,6) --from--(0,3)> to 1
group  [0, 1, 2, 3]
node_index  1
offset  2
(node_index + len(group) - offset) % len(group)  3
src 1
dst 2
blk  [6,8) --from--(1,0)
CommOp  1 send <[6,8) --from--(1,0)> to 2
group  [0, 1, 2, 3]
node_index  2
offset  2
(node_index + len(group) - offset) % len(group)  0
src 2
dst 3
blk  [0,2) --from--(2,1)
CommOp  2 send <[0,2) --from--(2,1)> to 3
group  [0, 1, 2, 3]
node_index  3
offset  2
(node_index + len(group) - offset) % len(group)  1
src 3
dst 0
blk  [2,4) --from--(3,2)
CommOp  3 send <[2,4) --from--(3,2)> to 0
offset  3
group  [0, 1, 2, 3]
node_index  0
offset  3
(node_index + len(group) - offset) % len(group)  1
src 0
dst 1
blk  [2,4) --from--(0,3,2)
CommOp  0 send <[2,4) --from--(0,3,2)> to 1
group  [0, 1, 2, 3]
node_index  1
offset  3
(node_index + len(group) - offset) % len(group)  2
src 1
dst 2
blk  [4,6) --from--(1,0,3)
CommOp  1 send <[4,6) --from--(1,0,3)> to 2
group  [0, 1, 2, 3]
node_index  2
offset  3
(node_index + len(group) - offset) % len(group)  3
src 2
dst 3
blk  [6,8) --from--(2,1,0)
CommOp  2 send <[6,8) --from--(2,1,0)> to 3
group  [0, 1, 2, 3]
node_index  3
offset  3
(node_index + len(group) - offset) % len(group)  0
src 3
dst 0
blk  [0,2) --from--(3,2,1)
CommOp  3 send <[0,2) --from--(3,2,1)> to 0
op  Ring: 0 send <[6,8) --from--(0)> to 1, 1 send <[0,2) --from--(1)> to 2, 2 send <[2,4) --from--(2)> to 3, 3 send <[4,6) --from--(3)> to 0; 0 send <[4,6) --from--(0,3)> to 1, 1 send <[6,8) --from--(1,0)> to 2, 2 send <[0,2) --from--(2,1)> to 3, 3 send <[2,4) --from--(3,2)> to 0; 0 send <[2,4) --from--(0,3,2)> to 1, 1 send <[4,6) --from--(1,0,3)> to 2, 2 send <[6,8) --from--(2,1,0)> to 3, 3 send <[0,2) --from--(3,2,1)> to 0
origin  [[DataBlock<[0,8) --from--(0)>], [DataBlock<[0,8) --from--(1)>], [DataBlock<[0,8) --from--(2)>], [DataBlock<[0,8) --from--(3)>], [DataBlock<[0,8) --from--(4)>], [DataBlock<[0,8) --from--(5)>], [DataBlock<[0,8) --from--(6)>], [DataBlock<[0,8) --from--(7)>]]
target  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>], [DataBlock<[4,6) --from--(0,1,2,3)>], [DataBlock<[6,8) --from--(0,1,2,3)>], [DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>], [DataBlock<[4,6) --from--(4,5,6,7)>], [DataBlock<[6,8) --from--(4,5,6,7)>]]
353 target[ 4 ] before sort  [DataBlock<[0,2) --from--(4,5,6,7)>]
355 target[ 4 ] after sort  [DataBlock<[0,2) --from--(4,5,6,7)>]
353 target[ 5 ] before sort  [DataBlock<[2,4) --from--(4,5,6,7)>]
355 target[ 5 ] after sort  [DataBlock<[2,4) --from--(4,5,6,7)>]
353 target[ 6 ] before sort  [DataBlock<[4,6) --from--(4,5,6,7)>]
355 target[ 6 ] after sort  [DataBlock<[4,6) --from--(4,5,6,7)>]
353 target[ 7 ] before sort  [DataBlock<[6,8) --from--(4,5,6,7)>]
355 target[ 7 ] after sort  [DataBlock<[6,8) --from--(4,5,6,7)>]
RingOp i  5
origin[group[0]]  [DataBlock<[0,8) --from--(4)>]
origin[i]  [DataBlock<[0,8) --from--(5)>]
RingOp i  6
origin[group[0]]  [DataBlock<[0,8) --from--(4)>]
origin[i]  [DataBlock<[0,8) --from--(6)>]
RingOp i  7
origin[group[0]]  [DataBlock<[0,8) --from--(4)>]
origin[i]  [DataBlock<[0,8) --from--(7)>]
360 group  [4, 5, 6, 7]
362 target[i][0]  [6,8) --from--(4,5,6,7)
364 group  [4, 5, 6, 7]
block_template[ 0 ]  [DataBlock<[0,2)>]
block_template[ 1 ]  [DataBlock<[2,4)>]
block_template[ 2 ]  [DataBlock<[4,6)>]
block_template[ 3 ]  [DataBlock<[6,8)>]
offset  1
group  [4, 5, 6, 7]
node_index  4
offset  1
(node_index + len(group) - offset) % len(group)  3
src 4
dst 5
blk  [6,8) --from--(4)
CommOp  4 send <[6,8) --from--(4)> to 5
group  [4, 5, 6, 7]
node_index  5
offset  1
(node_index + len(group) - offset) % len(group)  0
src 5
dst 6
blk  [0,2) --from--(5)
CommOp  5 send <[0,2) --from--(5)> to 6
group  [4, 5, 6, 7]
node_index  6
offset  1
(node_index + len(group) - offset) % len(group)  1
src 6
dst 7
blk  [2,4) --from--(6)
CommOp  6 send <[2,4) --from--(6)> to 7
group  [4, 5, 6, 7]
node_index  7
offset  1
(node_index + len(group) - offset) % len(group)  2
src 7
dst 4
blk  [4,6) --from--(7)
CommOp  7 send <[4,6) --from--(7)> to 4
offset  2
group  [4, 5, 6, 7]
node_index  4
offset  2
(node_index + len(group) - offset) % len(group)  2
src 4
dst 5
blk  [4,6) --from--(4,7)
CommOp  4 send <[4,6) --from--(4,7)> to 5
group  [4, 5, 6, 7]
node_index  5
offset  2
(node_index + len(group) - offset) % len(group)  3
src 5
dst 6
blk  [6,8) --from--(5,4)
CommOp  5 send <[6,8) --from--(5,4)> to 6
group  [4, 5, 6, 7]
node_index  6
offset  2
(node_index + len(group) - offset) % len(group)  0
src 6
dst 7
blk  [0,2) --from--(6,5)
CommOp  6 send <[0,2) --from--(6,5)> to 7
group  [4, 5, 6, 7]
node_index  7
offset  2
(node_index + len(group) - offset) % len(group)  1
src 7
dst 4
blk  [2,4) --from--(7,6)
CommOp  7 send <[2,4) --from--(7,6)> to 4
offset  3
group  [4, 5, 6, 7]
node_index  4
offset  3
(node_index + len(group) - offset) % len(group)  1
src 4
dst 5
blk  [2,4) --from--(4,7,6)
CommOp  4 send <[2,4) --from--(4,7,6)> to 5
group  [4, 5, 6, 7]
node_index  5
offset  3
(node_index + len(group) - offset) % len(group)  2
src 5
dst 6
blk  [4,6) --from--(5,4,7)
CommOp  5 send <[4,6) --from--(5,4,7)> to 6
group  [4, 5, 6, 7]
node_index  6
offset  3
(node_index + len(group) - offset) % len(group)  3
src 6
dst 7
blk  [6,8) --from--(6,5,4)
CommOp  6 send <[6,8) --from--(6,5,4)> to 7
group  [4, 5, 6, 7]
node_index  7
offset  3
(node_index + len(group) - offset) % len(group)  0
src 7
dst 4
blk  [0,2) --from--(7,6,5)
CommOp  7 send <[0,2) --from--(7,6,5)> to 4
op  Ring: 4 send <[6,8) --from--(4)> to 5, 5 send <[0,2) --from--(5)> to 6, 6 send <[2,4) --from--(6)> to 7, 7 send <[4,6) --from--(7)> to 4; 4 send <[4,6) --from--(4,7)> to 5, 5 send <[6,8) --from--(5,4)> to 6, 6 send <[0,2) --from--(6,5)> to 7, 7 send <[2,4) --from--(7,6)> to 4; 4 send <[2,4) --from--(4,7,6)> to 5, 5 send <[4,6) --from--(5,4,7)> to 6, 6 send <[6,8) --from--(6,5,4)> to 7, 7 send <[0,2) --from--(7,6,5)> to 4
color  [0, 0, 0, 0, 0, 0, 0, 0]
ans  [[0, 4], [1, 5], [2, 6], [3, 7]]
origin  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>], [DataBlock<[4,6) --from--(0,1,2,3)>], [DataBlock<[6,8) --from--(0,1,2,3)>], [DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>], [DataBlock<[4,6) --from--(4,5,6,7)>], [DataBlock<[6,8) --from--(4,5,6,7)>]]
target  [[DataBlock<[0,1) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[3,4) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[4,5) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[7,8) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[1,2) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[2,3) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[5,6) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[6,7) --from--(0,1,2,3,4,5,6,7)>]]
353 target[ 0 ] before sort  [DataBlock<[0,1) --from--(0,1,2,3,4,5,6,7)>]
355 target[ 0 ] after sort  [DataBlock<[0,1) --from--(0,1,2,3,4,5,6,7)>]
353 target[ 4 ] before sort  [DataBlock<[1,2) --from--(0,1,2,3,4,5,6,7)>]
355 target[ 4 ] after sort  [DataBlock<[1,2) --from--(0,1,2,3,4,5,6,7)>]
RingOp i  4
origin[group[0]]  [DataBlock<[0,2) --from--(0,1,2,3)>]
origin[i]  [DataBlock<[0,2) --from--(4,5,6,7)>]
360 group  [0, 4]
362 target[i][0]  [1,2) --from--(0,1,2,3,4,5,6,7)
364 group  [0, 4]
block_template[ 0 ]  [DataBlock<[0,1)>]
block_template[ 1 ]  [DataBlock<[1,2)>]
offset  1
group  [0, 4]
node_index  0
offset  1
(node_index + len(group) - offset) % len(group)  1
src 0
dst 4
blk  [1,2) --from--(0,1,2,3)
CommOp  0 send <[1,2) --from--(0,1,2,3)> to 4
group  [0, 4]
node_index  4
offset  1
(node_index + len(group) - offset) % len(group)  1
src 4
dst 0
blk  [0,1) --from--(4,5,6,7)
CommOp  4 send <[0,1) --from--(4,5,6,7)> to 0
op  Ring: 0 send <[1,2) --from--(0,1,2,3)> to 4, 4 send <[0,1) --from--(4,5,6,7)> to 0
origin  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>], [DataBlock<[4,6) --from--(0,1,2,3)>], [DataBlock<[6,8) --from--(0,1,2,3)>], [DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>], [DataBlock<[4,6) --from--(4,5,6,7)>], [DataBlock<[6,8) --from--(4,5,6,7)>]]
target  [[DataBlock<[0,1) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[3,4) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[4,5) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[7,8) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[1,2) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[2,3) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[5,6) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[6,7) --from--(0,1,2,3,4,5,6,7)>]]
353 target[ 1 ] before sort  [DataBlock<[3,4) --from--(0,1,2,3,4,5,6,7)>]
355 target[ 1 ] after sort  [DataBlock<[3,4) --from--(0,1,2,3,4,5,6,7)>]
353 target[ 5 ] before sort  [DataBlock<[2,3) --from--(0,1,2,3,4,5,6,7)>]
355 target[ 5 ] after sort  [DataBlock<[2,3) --from--(0,1,2,3,4,5,6,7)>]
RingOp i  5
origin[group[0]]  [DataBlock<[2,4) --from--(0,1,2,3)>]
origin[i]  [DataBlock<[2,4) --from--(4,5,6,7)>]
360 group  [1, 5]
362 target[i][0]  [2,3) --from--(0,1,2,3,4,5,6,7)
364 group  [5, 1]
block_template[ 0 ]  [DataBlock<[2,3)>]
block_template[ 1 ]  [DataBlock<[3,4)>]
offset  1
group  [5, 1]
node_index  5
offset  1
(node_index + len(group) - offset) % len(group)  0
src 5
dst 1
blk  [3,4) --from--(4,5,6,7)
CommOp  5 send <[3,4) --from--(4,5,6,7)> to 1
group  [5, 1]
node_index  1
offset  1
(node_index + len(group) - offset) % len(group)  0
src 1
dst 5
blk  [2,3) --from--(0,1,2,3)
CommOp  1 send <[2,3) --from--(0,1,2,3)> to 5
op  Ring: 5 send <[3,4) --from--(4,5,6,7)> to 1, 1 send <[2,3) --from--(0,1,2,3)> to 5
origin  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>], [DataBlock<[4,6) --from--(0,1,2,3)>], [DataBlock<[6,8) --from--(0,1,2,3)>], [DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>], [DataBlock<[4,6) --from--(4,5,6,7)>], [DataBlock<[6,8) --from--(4,5,6,7)>]]
target  [[DataBlock<[0,1) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[3,4) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[4,5) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[7,8) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[1,2) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[2,3) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[5,6) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[6,7) --from--(0,1,2,3,4,5,6,7)>]]
353 target[ 2 ] before sort  [DataBlock<[4,5) --from--(0,1,2,3,4,5,6,7)>]
355 target[ 2 ] after sort  [DataBlock<[4,5) --from--(0,1,2,3,4,5,6,7)>]
353 target[ 6 ] before sort  [DataBlock<[5,6) --from--(0,1,2,3,4,5,6,7)>]
355 target[ 6 ] after sort  [DataBlock<[5,6) --from--(0,1,2,3,4,5,6,7)>]
RingOp i  6
origin[group[0]]  [DataBlock<[4,6) --from--(0,1,2,3)>]
origin[i]  [DataBlock<[4,6) --from--(4,5,6,7)>]
360 group  [2, 6]
362 target[i][0]  [5,6) --from--(0,1,2,3,4,5,6,7)
364 group  [2, 6]
block_template[ 0 ]  [DataBlock<[4,5)>]
block_template[ 1 ]  [DataBlock<[5,6)>]
offset  1
group  [2, 6]
node_index  2
offset  1
(node_index + len(group) - offset) % len(group)  1
src 2
dst 6
blk  [5,6) --from--(0,1,2,3)
CommOp  2 send <[5,6) --from--(0,1,2,3)> to 6
group  [2, 6]
node_index  6
offset  1
(node_index + len(group) - offset) % len(group)  1
src 6
dst 2
blk  [4,5) --from--(4,5,6,7)
CommOp  6 send <[4,5) --from--(4,5,6,7)> to 2
op  Ring: 2 send <[5,6) --from--(0,1,2,3)> to 6, 6 send <[4,5) --from--(4,5,6,7)> to 2
origin  [[DataBlock<[0,2) --from--(0,1,2,3)>], [DataBlock<[2,4) --from--(0,1,2,3)>], [DataBlock<[4,6) --from--(0,1,2,3)>], [DataBlock<[6,8) --from--(0,1,2,3)>], [DataBlock<[0,2) --from--(4,5,6,7)>], [DataBlock<[2,4) --from--(4,5,6,7)>], [DataBlock<[4,6) --from--(4,5,6,7)>], [DataBlock<[6,8) --from--(4,5,6,7)>]]
target  [[DataBlock<[0,1) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[3,4) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[4,5) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[7,8) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[1,2) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[2,3) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[5,6) --from--(0,1,2,3,4,5,6,7)>], [DataBlock<[6,7) --from--(0,1,2,3,4,5,6,7)>]]
353 target[ 3 ] before sort  [DataBlock<[7,8) --from--(0,1,2,3,4,5,6,7)>]
355 target[ 3 ] after sort  [DataBlock<[7,8) --from--(0,1,2,3,4,5,6,7)>]
353 target[ 7 ] before sort  [DataBlock<[6,7) --from--(0,1,2,3,4,5,6,7)>]
355 target[ 7 ] after sort  [DataBlock<[6,7) --from--(0,1,2,3,4,5,6,7)>]
RingOp i  7
origin[group[0]]  [DataBlock<[6,8) --from--(0,1,2,3)>]
origin[i]  [DataBlock<[6,8) --from--(4,5,6,7)>]
360 group  [3, 7]
362 target[i][0]  [6,7) --from--(0,1,2,3,4,5,6,7)
364 group  [7, 3]
block_template[ 0 ]  [DataBlock<[6,7)>]
block_template[ 1 ]  [DataBlock<[7,8)>]
offset  1
group  [7, 3]
node_index  7
offset  1
(node_index + len(group) - offset) % len(group)  0
src 7
dst 3
blk  [7,8) --from--(4,5,6,7)
CommOp  7 send <[7,8) --from--(4,5,6,7)> to 3
group  [7, 3]
node_index  3
offset  1
(node_index + len(group) - offset) % len(group)  0
src 3
dst 7
blk  [6,7) --from--(0,1,2,3)
CommOp  3 send <[6,7) --from--(0,1,2,3)> to 7
op  Ring: 7 send <[7,8) --from--(4,5,6,7)> to 3, 3 send <[6,7) --from--(0,1,2,3)> to 7
quit
Reduce-scatter step schedules on symmetry ((0,1,2,3),(4,5,6,7))
Step Schedule 0
Step schedule
> Step 0
Ring: 0 send <[6,8) --from--(0)> to 1, 1 send <[0,2) --from--(1)> to 2, 2 send <[2,4) --from--(2)> to 3, 3 send <[4,6) --from--(3)> to 0; 0 send <[4,6) --from--(0,3)> to 1, 1 send <[6,8) --from--(1,0)> to 2, 2 send <[0,2) --from--(2,1)> to 3, 3 send <[2,4) --from--(3,2)> to 0; 0 send <[2,4) --from--(0,3,2)> to 1, 1 send <[4,6) --from--(1,0,3)> to 2, 2 send <[6,8) --from--(2,1,0)> to 3, 3 send <[0,2) --from--(3,2,1)> to 0
Ring: 4 send <[6,8) --from--(4)> to 5, 5 send <[0,2) --from--(5)> to 6, 6 send <[2,4) --from--(6)> to 7, 7 send <[4,6) --from--(7)> to 4; 4 send <[4,6) --from--(4,7)> to 5, 5 send <[6,8) --from--(5,4)> to 6, 6 send <[0,2) --from--(6,5)> to 7, 7 send <[2,4) --from--(7,6)> to 4; 4 send <[2,4) --from--(4,7,6)> to 5, 5 send <[4,6) --from--(5,4,7)> to 6, 6 send <[6,8) --from--(6,5,4)> to 7, 7 send <[0,2) --from--(7,6,5)> to 4
> Step 1
Ring: 0 send <[1,2) --from--(0,1,2,3)> to 4, 4 send <[0,1) --from--(4,5,6,7)> to 0
Ring: 5 send <[3,4) --from--(4,5,6,7)> to 1, 1 send <[2,3) --from--(0,1,2,3)> to 5
Ring: 2 send <[5,6) --from--(0,1,2,3)> to 6, 6 send <[4,5) --from--(4,5,6,7)> to 2
Ring: 7 send <[7,8) --from--(4,5,6,7)> to 3, 3 send <[6,7) --from--(0,1,2,3)> to 7
---- one round ----
create a chunk:  0 send data from addr 6  size  2 to 1
create a chunk:  1 send data from addr 0  size  2 to 2
create a chunk:  2 send data from addr 2  size  2 to 3
create a chunk:  3 send data from addr 4  size  2 to 0
---- one round ----
create a chunk:  0 send data from addr 4  size  2 to 1
create a chunk:  1 send data from addr 6  size  2 to 2
create a chunk:  2 send data from addr 0  size  2 to 3
create a chunk:  3 send data from addr 2  size  2 to 0
---- one round ----
create a chunk:  0 send data from addr 2  size  2 to 1
create a chunk:  1 send data from addr 4  size  2 to 2
create a chunk:  2 send data from addr 6  size  2 to 3
create a chunk:  3 send data from addr 0  size  2 to 0
---- one round ----
create a chunk:  4 send data from addr 6  size  2 to 5
create a chunk:  5 send data from addr 0  size  2 to 6
create a chunk:  6 send data from addr 2  size  2 to 7
create a chunk:  7 send data from addr 4  size  2 to 4
---- one round ----
create a chunk:  4 send data from addr 4  size  2 to 5
create a chunk:  5 send data from addr 6  size  2 to 6
create a chunk:  6 send data from addr 0  size  2 to 7
create a chunk:  7 send data from addr 2  size  2 to 4
---- one round ----
create a chunk:  4 send data from addr 2  size  2 to 5
create a chunk:  5 send data from addr 4  size  2 to 6
create a chunk:  6 send data from addr 6  size  2 to 7
create a chunk:  7 send data from addr 0  size  2 to 4
---- one round ----
create a chunk:  0 send data from addr 1  size  1 to 4
create a chunk:  4 send data from addr 0  size  1 to 0
---- one round ----
create a chunk:  5 send data from addr 3  size  1 to 1
create a chunk:  1 send data from addr 2  size  1 to 5
---- one round ----
create a chunk:  2 send data from addr 5  size  1 to 6
create a chunk:  6 send data from addr 4  size  1 to 2
---- one round ----
create a chunk:  7 send data from addr 7  size  1 to 3
create a chunk:  3 send data from addr 6  size  1 to 7
<algo name="reducescatter_neogen" proto="Simple" nchannels="4" nchunksperloop="8" ngpus="8" coll="reduce_scatter" inplace="1">
  <gpu id="0" i_chunks="8" o_chunks="0" s_chunks="0">
    <tb id="0" send="-1" recv="3" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="2" depid="-1" deps="-1" hasdep="1"/>
    </tb>
    <tb id="1" send="-1" recv="4" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="1" depid="0" deps="0" hasdep="0"/>
    </tb>
    <tb id="2" send="1" recv="-1" chan="3">
      <step s="0" type="s" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="3" send="1" recv="3" chan="1">
      <step s="0" type="rrcs" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="4" send="1" recv="3" chan="2">
      <step s="0" type="rrcs" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="5" send="4" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="1" dstbuf="i" dstoff="1" cnt="1" depid="0" deps="0" hasdep="0"/>
    </tb>
  </gpu>
  <gpu id="1" i_chunks="8" o_chunks="0" s_chunks="0">
    <tb id="0" send="-1" recv="0" chan="1">
      <step s="0" type="rrc" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="2" depid="-1" deps="-1" hasdep="1"/>
    </tb>
    <tb id="1" send="-1" recv="5" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="3" dstbuf="i" dstoff="3" cnt="1" depid="0" deps="0" hasdep="0"/>
    </tb>
    <tb id="2" send="2" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="3" send="2" recv="0" chan="2">
      <step s="0" type="rrcs" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="4" send="2" recv="0" chan="3">
      <step s="0" type="rrcs" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="5" send="5" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="1" depid="0" deps="0" hasdep="0"/>
    </tb>
  </gpu>
  <gpu id="2" i_chunks="8" o_chunks="0" s_chunks="0">
    <tb id="0" send="-1" recv="1" chan="2">
      <step s="0" type="rrc" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="2" depid="-1" deps="-1" hasdep="1"/>
    </tb>
    <tb id="1" send="-1" recv="6" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="1" depid="0" deps="0" hasdep="0"/>
    </tb>
    <tb id="2" send="3" recv="-1" chan="1">
      <step s="0" type="s" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="3" send="3" recv="1" chan="0">
      <step s="0" type="rrcs" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="4" send="3" recv="1" chan="3">
      <step s="0" type="rrcs" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="5" send="6" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="5" dstbuf="i" dstoff="5" cnt="1" depid="0" deps="0" hasdep="0"/>
    </tb>
  </gpu>
  <gpu id="3" i_chunks="8" o_chunks="0" s_chunks="0">
    <tb id="0" send="-1" recv="2" chan="3">
      <step s="0" type="rrc" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="2" depid="-1" deps="-1" hasdep="1"/>
    </tb>
    <tb id="1" send="-1" recv="7" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="7" dstbuf="i" dstoff="7" cnt="1" depid="0" deps="0" hasdep="0"/>
    </tb>
    <tb id="2" send="0" recv="-1" chan="2">
      <step s="0" type="s" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="3" send="0" recv="2" chan="0">
      <step s="0" type="rrcs" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="4" send="0" recv="2" chan="1">
      <step s="0" type="rrcs" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="5" send="7" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="1" depid="0" deps="0" hasdep="0"/>
    </tb>
  </gpu>
  <gpu id="4" i_chunks="8" o_chunks="0" s_chunks="0">
    <tb id="0" send="-1" recv="0" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="1" dstbuf="i" dstoff="1" cnt="1" depid="1" deps="0" hasdep="0"/>
    </tb>
    <tb id="1" send="-1" recv="7" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="2" depid="-1" deps="-1" hasdep="1"/>
    </tb>
    <tb id="2" send="0" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="1" depid="1" deps="0" hasdep="0"/>
    </tb>
    <tb id="3" send="5" recv="-1" chan="3">
      <step s="0" type="s" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="4" send="5" recv="7" chan="1">
      <step s="0" type="rrcs" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="5" send="5" recv="7" chan="2">
      <step s="0" type="rrcs" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
  </gpu>
  <gpu id="5" i_chunks="8" o_chunks="0" s_chunks="0">
    <tb id="0" send="-1" recv="1" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="1" depid="1" deps="0" hasdep="0"/>
    </tb>
    <tb id="1" send="-1" recv="4" chan="1">
      <step s="0" type="rrc" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="2" depid="-1" deps="-1" hasdep="1"/>
    </tb>
    <tb id="2" send="1" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="3" dstbuf="i" dstoff="3" cnt="1" depid="1" deps="0" hasdep="0"/>
    </tb>
    <tb id="3" send="6" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="4" send="6" recv="4" chan="2">
      <step s="0" type="rrcs" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="5" send="6" recv="4" chan="3">
      <step s="0" type="rrcs" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
  </gpu>
  <gpu id="6" i_chunks="8" o_chunks="0" s_chunks="0">
    <tb id="0" send="-1" recv="2" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="5" dstbuf="i" dstoff="5" cnt="1" depid="1" deps="0" hasdep="0"/>
    </tb>
    <tb id="1" send="-1" recv="5" chan="2">
      <step s="0" type="rrc" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="2" depid="-1" deps="-1" hasdep="1"/>
    </tb>
    <tb id="2" send="2" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="1" depid="1" deps="0" hasdep="0"/>
    </tb>
    <tb id="3" send="7" recv="-1" chan="1">
      <step s="0" type="s" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="4" send="7" recv="5" chan="0">
      <step s="0" type="rrcs" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="5" send="7" recv="5" chan="3">
      <step s="0" type="rrcs" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
  </gpu>
  <gpu id="7" i_chunks="8" o_chunks="0" s_chunks="0">
    <tb id="0" send="-1" recv="3" chan="0">
      <step s="0" type="rrc" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="1" depid="1" deps="0" hasdep="0"/>
    </tb>
    <tb id="1" send="-1" recv="6" chan="3">
      <step s="0" type="rrc" srcbuf="i" srcoff="6" dstbuf="i" dstoff="6" cnt="2" depid="-1" deps="-1" hasdep="1"/>
    </tb>
    <tb id="2" send="3" recv="-1" chan="0">
      <step s="0" type="s" srcbuf="i" srcoff="7" dstbuf="i" dstoff="7" cnt="1" depid="1" deps="0" hasdep="0"/>
    </tb>
    <tb id="3" send="4" recv="-1" chan="2">
      <step s="0" type="s" srcbuf="i" srcoff="4" dstbuf="i" dstoff="4" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="4" send="4" recv="6" chan="0">
      <step s="0" type="rrcs" srcbuf="i" srcoff="0" dstbuf="i" dstoff="0" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
    <tb id="5" send="4" recv="6" chan="1">
      <step s="0" type="rrcs" srcbuf="i" srcoff="2" dstbuf="i" dstoff="2" cnt="2" depid="-1" deps="-1" hasdep="0"/>
    </tb>
  </gpu>
</algo>
Rank 1 chunk 1 is incorrect should be index 1 from all ranks given Chunk(origin_rank=1, origin_index=1, dst_rank=1, dst_index=0)
Rank 2 chunk 2 is incorrect should be index 2 from all ranks given Chunk(origin_rank=2, origin_index=2, dst_rank=2, dst_index=0)
Rank 3 chunk 3 is incorrect should be index 3 from all ranks given ReduceChunk(creation_rank=3, chunks=[Chunk(origin_rank=2, origin_index=3, dst_rank=3, dst_index=0), Chunk(origin_rank=3, origin_index=3, dst_rank=3, dst_index=0)])
Rank 4 chunk 4 is incorrect should be index 4 from all ranks given ReduceChunk(creation_rank=4, chunks=[Chunk(origin_rank=4, origin_index=4, dst_rank=4, dst_index=0), Chunk(origin_rank=7, origin_index=4, dst_rank=4, dst_index=0)])
Rank 5 chunk 5 is incorrect should be index 5 from all ranks given ReduceChunk(creation_rank=4, chunks=[Chunk(origin_rank=4, origin_index=5, dst_rank=5, dst_index=0), Chunk(origin_rank=5, origin_index=5, dst_rank=5, dst_index=0), Chunk(origin_rank=7, origin_index=5, dst_rank=5, dst_index=0)])
Rank 6 chunk 6 is incorrect should be index 6 from all ranks given ReduceChunk(creation_rank=5, chunks=[Chunk(origin_rank=4, origin_index=6, dst_rank=6, dst_index=0), Chunk(origin_rank=5, origin_index=6, dst_rank=6, dst_index=0), Chunk(origin_rank=6, origin_index=6, dst_rank=6, dst_index=0)])
Rank 7 chunk 7 is incorrect should be index 7 from all ranks given ReduceChunk(creation_rank=5, chunks=[Chunk(origin_rank=4, origin_index=7, dst_rank=7, dst_index=0), Chunk(origin_rank=5, origin_index=7, dst_rank=7, dst_index=0), Chunk(origin_rank=6, origin_index=7, dst_rank=7, dst_index=0), Chunk(origin_rank=7, origin_index=7, dst_rank=7, dst_index=0)])
